- Rendezvous

	- IP:Porta fixos. Nós que querem se conectar ao DHT devem se conectar ao rendezvous primeiro.
	- Comunicaçao feita via socket UDP:
		- Inicio DHT: Nó envia "hello"  para o rendezvous.
		- Rendezvous gera um ID para o nó.
		- Nó retorna um ACK.
		- Rendezvous associa IP:Porta do nó solicitante para o ID gerado acima.
	- Duas formas de formacao dos IDs distintas:
		- 0 a K, k = maximos de nos na rede.
		ou
		- 2 a K, sendo todo elemento uma potencia de 2.
	- IDs devem ser atribuidos de forma aleatoria. dentro da faixa K.
	- Renzesvouz salva uma tabela com todos os nos participantes e seus respectivos IDs.
	- Apos receberem seu ID os nós devem perguntar para o rendezvous quem é o root node. Isso é feito mandando uma mensagem ‘root node’
		- Caso nao ha root node ainda, a resposta será ‘no root yet’
		- Caso haja um root, a resposta será ‘ip:porta’
		- Caso haja um root e seja quem perguntou, a resposta será ‘you are the root’
	- Os nós devem avisar o rendezvous quando forem sair da rede.
		- mensagem: "disconnect"
	- Os nós devem avisar o rendezvous a cada X segundos que estao ativos. (evitar manter alocado caso a internet caiu ou algo do tipo)
		- mensagem: "still active"


	PROBLEMAS: 
	- "O cliente envia a mensagem hello mas nao recebe a mensagem resposta do servidor"
		- espera por um TIME_LIMIT, caso nao receba resposta envia a request novamente.
 	- "O servidor envia a mensagem com o ID pre-alocado mas naao recebe a confirmacao de Ack do cliente"
 		- Reenvia o ID apos um TIME_LIMIT, caso nao receba o ACK novamente desaloca o ID e mata o processo.
 	- "Mensagens chegam duplicadas no servidor"
 		- Definir como vou fazer isso. provavelmente eu confiro e so ignoro caso seja repetido
 	- "Mensagens chegam fora da ordem ao servidor (UDP)"
 		- Trata na ordem que chegou.



- REQUESTS:
	- ‘hello’
		- Caso 1: Nó nao esta alocado e nao ha root
			- O rendezvous pre aloca o ID. Porem nao abre thread ainda. Ele ignora novas requests.
			- Retorna o ‘ID;you are the root node’. 
			- Fica aguardando um ACK do no solicitante. 
			- Nao receba mais nenhuma request durante o periodo de espera.
			- Recebendo o ACK:
				- ele salva que o root node é aquele ID pre aloca e aloca o No definitivamente
				- retorna 
			- Nao recebendo o ACK ele apenas desaloca tudo e volta para o estado de espera de um root node.
		- Caso 2: Nó nao esta alocado e ha root
		- Caso 3: Nó está alocado ou pre alocado
			- Simplesmente ignora.(nao faz nada)
		










